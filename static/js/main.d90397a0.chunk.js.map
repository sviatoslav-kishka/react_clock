{"version":3,"sources":["components/Clock/Clock.js","components/Button/Button.js","App.js","index.js"],"names":["Clock","state","date","Date","toLocaleTimeString","this","timer","setInterval","setState","console","log","prevProps","name","props","oldName","newName","clearInterval","React","Component","Button","actionName","callback","type","onClick","App","isClockVisible","clockName","className","Math","floor","random","ReactDOM","render","document","getElementById"],"mappings":"uMAGaA,EAAb,4MACEC,MAAQ,CACNC,MAAM,IAAIC,MAAOC,sBAFrB,uDAKE,WAAqB,IAAD,OAClBC,KAAKC,MAAQC,aAAY,WACvB,EAAKC,SAAS,CAAEN,MAAM,IAAIC,MAAOC,uBAGjCK,QAAQC,IAAI,EAAKT,MAAMC,QACtB,OAXP,gCAcE,SAAmBS,GACjB,GAAIA,EAAUC,OAASP,KAAKQ,MAAMD,KAAM,CACtC,IAAME,EAAUH,EAAUC,KACpBG,EAAUV,KAAKQ,MAAMD,KAE3BH,QAAQC,IAAR,qCAA0CI,EAA1C,eAAwDC,OAnB9D,kCAuBE,WACEC,cAAcX,KAAKC,SAxBvB,oBA2BE,WACE,MAAM,GAAN,OACKD,KAAKJ,MAAMC,UA7BpB,GAA2Be,IAAMC,WCApBC,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,SAAf,OACpB,4BACEC,KAAK,SACLC,QAASF,GAERD,KCFQI,EAAb,4MACEvB,MAAQ,CACNwB,gBAAgB,EAChBC,UAAW,aAHf,4CAME,WAAU,IAAD,OACP,OACE,yBAAKC,UAAU,OACb,2CACA,2CAEG,IACAtB,KAAKJ,MAAMwB,gBAAmB,kBAAC,EAAD,CAAOb,KAAMP,KAAKJ,MAAMyB,aAEzD,kBAAC,EAAD,CACEN,WAAW,aACXC,SAAU,WACR,EAAKb,SAAS,CAAEiB,gBAAgB,OAGpC,kBAAC,EAAD,CACEL,WAAW,aACXC,SAAU,WACR,EAAKb,SAAS,CAAEiB,gBAAgB,OAGpC,kBAAC,EAAD,CACEL,WAAW,kBACXC,SAAU,WACR,EAAKb,SAAS,CACZkB,UAAU,SAAD,OAAWE,KAAKC,MAAM,IAAAD,KAAKE,SAAwB,cA/B1E,GAAyBb,IAAMC,WCF/Ba,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.d90397a0.chunk.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\n\nexport class Clock extends React.Component {\n  state = {\n    date: new Date().toLocaleTimeString(),\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.setState({ date: new Date().toLocaleTimeString() });\n\n      // eslint-disable-next-line\n      console.log(this.state.date);\n    }, 1000);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.name !== this.props.name) {\n      const oldName = prevProps.name;\n      const newName = this.props.name;\n\n      console.log(`The Clock was renamed from ${oldName} to ${newName}`);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    return (\n      `${this.state.date}`\n    );\n  }\n}\n\nClock.propTypes = {\n  name: propTypes.string.isRequired,\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nexport const Button = ({ actionName, callback }) => (\n  <button\n    type=\"button\"\n    onClick={callback}\n  >\n    {actionName}\n  </button>\n);\n\nButton.propTypes = {\n  actionName: propTypes.string.isRequired,\n  callback: propTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport { Clock } from './components/Clock';\nimport './App.scss';\nimport { Button } from './components/Button';\n\nexport class App extends React.Component {\n  state = {\n    isClockVisible: true,\n    clockName: 'firstname',\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n        <p>\n          Current time:\n          {' '}\n          {this.state.isClockVisible && (<Clock name={this.state.clockName} />)}\n        </p>\n        <Button\n          actionName=\"Show Clock\"\n          callback={() => {\n            this.setState({ isClockVisible: true });\n          }}\n        />\n        <Button\n          actionName=\"Hide Clock\"\n          callback={() => {\n            this.setState({ isClockVisible: false });\n          }}\n        />\n        <Button\n          actionName=\"Set random name\"\n          callback={() => {\n            this.setState({\n              clockName: `Clock#${Math.floor(Math.random() * (1000 - 1) + 1)}`,\n            });\n          }}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}